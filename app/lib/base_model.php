<?php

namespace app\lib;

use ext\conf;
use ext\mysql;

class base_model extends mysql
{
    //public $table = '';

    public function __construct(array $conf = [])
    {
        //支持自定义加载不同的conf配置
        $conf_name = $this->conf_name ?? 'mysql';

        parent::__construct(conf::get($conf_name));
    }

    public function fetch(int $fetch_style = \PDO::FETCH_ASSOC): array
    {
        //$where = $this->runtime['bind_where'] ?? [];
        $res = parent::fetch_all($fetch_style); // TODO: Change the autogenerated stub

        //$sql   = $this->last_sql();
        //foreach ($where as $k => $v) {
        //    $sql = str_replace($k, $v, $sql);
        //}
        //$env = boot::$env;
        //if($env != 'prod'){
        //    core::add_error('sql',$sql);
        //}
        return $res;
    }

    public function alias($alias)
    {
        $table_path  = get_called_class();
        $table       = explode('\\', $table_path);
        $this->table = $this->escape($this->prefix . end($table) . " AS " . $alias);
        return $this;
    }

    public function incre(array $where, array $incr, array $value = [])
    {
        return $this->where($where)->update()->incr($incr)->value($value)->execute();
    }

    public function get(): array
    {
        return $this->select()->fetch_all();
    }

    public function count(): int
    {
        return $this->select()->fields('COUNT(*) AS C')->fetch_row(\PDO::FETCH_COLUMN)[0];
    }

    public function get_one(): array
    {
        return $this->select()->limit(1)->fetch_row();
    }

    public function exist(): bool
    {
        $data = $this->select()->limit(1)->fetch_row(\PDO::FETCH_COLUMN);
        return !empty($data);
    }

    public function get_value()
    {
        $data = $this->select()->limit(1)->fetch_row(\PDO::FETCH_COLUMN);
        return (string)current($data);
    }

    public function get_sum($field)
    {
        $res = $this->select()->limit(1)->fields("sum(" . $field . ")")->fetch_row(\PDO::FETCH_COLUMN);
        return current($res);
    }

    public function get_col(): array
    {
        return current($this->select()->fetch_row(\PDO::FETCH_COLUMN));
    }

    public function save()
    {
        return $this->update()->execute();
    }

    public function add()
    {
        return $this->insert()->execute();
    }

    public function select_value(string $field, array $where = [])
    {
        $res = $this->fields($field)->where($where)->limit(1)->select()->fetch_row(\PDO::FETCH_COLUMN);
        return (string)current($res);
    }

    public function select_one(string $field, array $where)
    {
        return $this->fields($field)->where($where)->limit(1)->select()->fetch_row();
    }

    public function lastInsertId()
    {
        return $this->instance->lastInsertId();
    }

    public function sum(string $field, array $where = [])
    {
        $instance = $this->fields("SUM($field) AS S")->select();
        if (!empty($where)) {
            $instance->where($where);
        }
        return (float)$instance->fetch_row(\PDO::FETCH_COLUMN)[0];
    }

}
